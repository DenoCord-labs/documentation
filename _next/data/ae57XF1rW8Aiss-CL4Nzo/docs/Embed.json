{"pageProps":{"doc":{"title":"Embeds","description":"Learn about embeds and how to create them using Denocord.","image":"/images/logo.png","order":4,"body":{"raw":"\nIf you've used Discord for a while you should've seen some special messages sent by users with a `Bot` `✅ Bot` tag.\n\nThey look something like this.\n\n![embed](/docs/embed.png)\n\nThey're called embeds.\n\nLets Create one using DenoCord\n\n```ts\nimport { Embed } from \"https://deno.land/x/denocordts/mod.ts\";\n\nconst embed = new Embed()\n  .setTitle(\"DenoCord\")\n  .setDescription(\"An Object Oriented Discord Api Wrapper for Deno.\")\n  .setColor(\"RANDOM\")\n  .setTimestamp();\n\nclient.on(\"MessageCreate\", async (message) => {\n  if (message.content === \"!info\") {\n    await message.reply({ embeds: [embed] });\n  }\n});\n```\n\n\nOutput:\n\n![outputEmbed](/docs/embedDenocord.png)\n\n\n\n<H2>Methods Available on Embed class</H2>\n- setTitle &rarr; Takes in a string and set it as embed's title\n- setDescription &rarr; Takes in a string and set it as embed's description\n- setAuthor &rarr; Takes in an object with `name` as required parameter and `url`,`proxy_icon_url`,`icon_url` as optional arguments, it will set the name and icon of embed's author to the provided values.\n- setColor &rarr; Takes in hex code of a color or name of color or `RANDOM` and set the color of the embed to the provided value, `RANDOM` will generate a random color each time.\n- setImage &rarr; Takes in a url of an image and set the image inside the embed. This will not show any image if the provided url returns a 404\n- setThumbnail &rarr; Same as `setImage` but it sets the thumbnail of the embed.\n- addField &rarr; Takes in 2 required(name,value) and one optional(inline) parameter, it will add new field in the embed.\n- addFields &rarr; Takes in an array of object with 2 required(name,value) and one optional(inline) parameter and add the field in the embed.\n- setTimestamp &rarr; Takes no parameter and set the timestamp on the embed, this timestamp will be different as per different timezones and each user will see the time respected to their timezones.\n- setFooter &rarr; Takes in an object with 2 only required(text) and two optional(icon_url,proxy_icon_url) properties, it will set the footer of the embed.\n\n<Callout variant=\"info\">\n    <H3> Points to Keep in mind when working with embeds </H3>\n    - Embeds can have maximum 25 fields\n    - If you've added footer and timestamp at the same time they will be rendered in the same line and timestamp will be at second position. They will be separated by `|` or `•`\n\n</Callout>","code":"var Component=(()=>{var p=Object.create;var l=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(s,i)=>()=>(i||s((i={exports:{}}).exports,i),i.exports),w=(s,i)=>{for(var t in i)l(s,t,{get:i[t],enumerable:!0})},c=(s,i,t,n)=>{if(i&&typeof i==\"object\"||typeof i==\"function\")for(let a of b(i))!g.call(s,a)&&a!==t&&l(s,a,{get:()=>i[a],enumerable:!(n=u(i,a))||n.enumerable});return s};var N=(s,i,t)=>(t=s!=null?p(f(s)):{},c(i||!s||!s.__esModule?l(t,\"default\",{value:s,enumerable:!0}):t,s)),y=s=>c(l({},\"__esModule\",{value:!0}),s);var m=j((D,h)=>{h.exports=_jsx_runtime});var x={};w(x,{default:()=>T,frontmatter:()=>_});var e=N(m()),_={title:\"Embeds\",description:\"Learn about embeds and how to create them using Denocord.\",order:4};function k(s={}){let{wrapper:i}=s.components||{};return i?(0,e.jsx)(i,Object.assign({},s,{children:(0,e.jsx)(t,{})})):t();function t(){let n=Object.assign({p:\"p\",code:\"code\",img:\"img\",pre:\"pre\",span:\"span\",ul:\"ul\",li:\"li\"},s.components),{H2:a,Callout:d,H3:o}=n;return d||r(\"Callout\",!0),a||r(\"H2\",!0),o||r(\"H3\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(n.p,{children:[\"If you've used Discord for a while you should've seen some special messages sent by users with a \",(0,e.jsx)(n.code,{children:\"Bot\"}),\" \",(0,e.jsx)(n.code,{children:\"\\u2705 Bot\"}),\" tag.\"]}),`\n`,(0,e.jsx)(n.p,{children:\"They look something like this.\"}),`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{src:\"/docs/embed.png\",alt:\"embed\"})}),`\n`,(0,e.jsx)(n.p,{children:\"They're called embeds.\"}),`\n`,(0,e.jsx)(n.p,{children:\"Lets Create one using DenoCord\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-ts\",children:(0,e.jsxs)(n.code,{className:\"hljs language-ts code-highlight\",children:[(0,e.jsx)(n.span,{className:\"hljs-keyword\",children:\"import\"}),\" { \",(0,e.jsx)(n.span,{className:\"hljs-title class_\",children:\"Embed\"}),\" } \",(0,e.jsx)(n.span,{className:\"hljs-keyword\",children:\"from\"}),\" \",(0,e.jsx)(n.span,{className:\"hljs-string\",children:'\"https://deno.land/x/denocordts/mod.ts\"'}),`;\n\n`,(0,e.jsx)(n.span,{className:\"hljs-keyword\",children:\"const\"}),\" embed = \",(0,e.jsx)(n.span,{className:\"hljs-keyword\",children:\"new\"}),\" \",(0,e.jsx)(n.span,{className:\"hljs-title class_\",children:\"Embed\"}),`()\n  .`,(0,e.jsx)(n.span,{className:\"hljs-title function_\",children:\"setTitle\"}),\"(\",(0,e.jsx)(n.span,{className:\"hljs-string\",children:'\"DenoCord\"'}),`)\n  .`,(0,e.jsx)(n.span,{className:\"hljs-title function_\",children:\"setDescription\"}),\"(\",(0,e.jsx)(n.span,{className:\"hljs-string\",children:'\"An Object Oriented Discord Api Wrapper for Deno.\"'}),`)\n  .`,(0,e.jsx)(n.span,{className:\"hljs-title function_\",children:\"setColor\"}),\"(\",(0,e.jsx)(n.span,{className:\"hljs-string\",children:'\"RANDOM\"'}),`)\n  .`,(0,e.jsx)(n.span,{className:\"hljs-title function_\",children:\"setTimestamp\"}),`();\n\nclient.`,(0,e.jsx)(n.span,{className:\"hljs-title function_\",children:\"on\"}),\"(\",(0,e.jsx)(n.span,{className:\"hljs-string\",children:'\"MessageCreate\"'}),\", \",(0,e.jsx)(n.span,{className:\"hljs-keyword\",children:\"async\"}),` (message) => {\n  `,(0,e.jsx)(n.span,{className:\"hljs-keyword\",children:\"if\"}),\" (message.\",(0,e.jsx)(n.span,{className:\"hljs-property\",children:\"content\"}),\" === \",(0,e.jsx)(n.span,{className:\"hljs-string\",children:'\"!info\"'}),`) {\n    `,(0,e.jsx)(n.span,{className:\"hljs-keyword\",children:\"await\"}),\" message.\",(0,e.jsx)(n.span,{className:\"hljs-title function_\",children:\"reply\"}),\"({ \",(0,e.jsx)(n.span,{className:\"hljs-attr\",children:\"embeds\"}),`: [embed] });\n  }\n});\n`]})}),`\n`,(0,e.jsx)(n.p,{children:\"Output:\"}),`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{src:\"/docs/embedDenocord.png\",alt:\"outputEmbed\"})}),`\n`,(0,e.jsx)(a,{children:\"Methods Available on Embed class\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"setTitle \\u2192 Takes in a string and set it as embed's title\"}),`\n`,(0,e.jsx)(n.li,{children:\"setDescription \\u2192 Takes in a string and set it as embed's description\"}),`\n`,(0,e.jsxs)(n.li,{children:[\"setAuthor \\u2192 Takes in an object with \",(0,e.jsx)(n.code,{children:\"name\"}),\" as required parameter and \",(0,e.jsx)(n.code,{children:\"url\"}),\",\",(0,e.jsx)(n.code,{children:\"proxy_icon_url\"}),\",\",(0,e.jsx)(n.code,{children:\"icon_url\"}),\" as optional arguments, it will set the name and icon of embed's author to the provided values.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[\"setColor \\u2192 Takes in hex code of a color or name of color or \",(0,e.jsx)(n.code,{children:\"RANDOM\"}),\" and set the color of the embed to the provided value, \",(0,e.jsx)(n.code,{children:\"RANDOM\"}),\" will generate a random color each time.\"]}),`\n`,(0,e.jsx)(n.li,{children:\"setImage \\u2192 Takes in a url of an image and set the image inside the embed. This will not show any image if the provided url returns a 404\"}),`\n`,(0,e.jsxs)(n.li,{children:[\"setThumbnail \\u2192 Same as \",(0,e.jsx)(n.code,{children:\"setImage\"}),\" but it sets the thumbnail of the embed.\"]}),`\n`,(0,e.jsx)(n.li,{children:\"addField \\u2192 Takes in 2 required(name,value) and one optional(inline) parameter, it will add new field in the embed.\"}),`\n`,(0,e.jsx)(n.li,{children:\"addFields \\u2192 Takes in an array of object with 2 required(name,value) and one optional(inline) parameter and add the field in the embed.\"}),`\n`,(0,e.jsx)(n.li,{children:\"setTimestamp \\u2192 Takes no parameter and set the timestamp on the embed, this timestamp will be different as per different timezones and each user will see the time respected to their timezones.\"}),`\n`,(0,e.jsx)(n.li,{children:\"setFooter \\u2192 Takes in an object with 2 only required(text) and two optional(icon_url,proxy_icon_url) properties, it will set the footer of the embed.\"}),`\n`]}),`\n`,(0,e.jsxs)(d,{variant:\"info\",children:[(0,e.jsx)(o,{children:\" Points to Keep in mind when working with embeds \"}),(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"Embeds can have maximum 25 fields\"}),`\n`,(0,e.jsxs)(n.li,{children:[\"If you've added footer and timestamp at the same time they will be rendered in the same line and timestamp will be at second position. They will be separated by \",(0,e.jsx)(n.code,{children:\"|\"}),\" or \",(0,e.jsx)(n.code,{children:\"\\u2022\"})]}),`\n`]})]})]})}}var T=k;function r(s,i){throw new Error(\"Expected \"+(i?\"component\":\"object\")+\" `\"+s+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return y(x);})();\n;return Component;"},"_id":"Embed.mdx","_raw":{"sourceFilePath":"Embed.mdx","sourceFileName":"Embed.mdx","sourceFileDir":".","contentType":"mdx","flattenedPath":"Embed"},"type":"Docs","url":"/docs/Embed","createdAt":1655107673603}},"__N_SSG":true}