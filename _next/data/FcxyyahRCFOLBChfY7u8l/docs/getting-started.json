{"pageProps":{"doc":{"title":"Getting Started","description":"Creating Your First Bot Using DenoCord.","image":"/images/logo.png","order":3,"body":{"raw":"\nLets Create a Basic Bot using DenoCord\n\n```ts\nimport { Client } from \"https://deno.land/x/denocordts/mod.ts\";\n\nconst client = new Client({\n  token: \"TOKEN\", // enter your bot's token here\n  clientId: \"ID\", // enter your bot's id here\n  intents: [\"Guilds\", \"GuildMessages\", \"GuildMembers\", \"MessageContent\"], // message content intent is required for the bot to get the content of the message\n});\n\nclient.on(\"Ready\", () => {\n  console.log(`Logged in as ${client.user.username} at ${new Date()}`);\n});\n\nclient.on(\"MessageCreate\", async (message) => {\n  if (message.content.toLowerCase() === \"!ping\") {\n    await message.reply({ content: `Pong!\\n${client.ping}ms` });\n  }\n});\n```\n\n<H3>Understanding the Code</H3>\n\n```ts\nimport { Client } from \"https://deno.land/x/denocordts/mod.ts\";\n```\n\n> We're Importing the Client class from the DenoCord library. Client is the main class that handles all the events. It takes 3 arguments\n>\n> - token &rarr; The Token of the bot which is required to interact with the discord's api. You can get one from [here](discord.com/developers/applications)\n> - clientId &rarr; The id of the bot.\n> - intents &rarr; The intents, it takes in a list of intents. You'll only recieve events whose intents are passed to the client. For Example: `MessageContent` intent will provide you with the `content` property on `Message` class.\n\n```ts\nconst client = new Client({\n  token: \"TOKEN\", // enter your bot's token here\n  clientId: \"ID\", // enter your bot's id here\n  intents: [\"Guilds\", \"GuildMessages\", \"GuildMembers\", \"MessageContent\"], // message content intent is required for the bot to get the content of the message\n});\n```\n> We're instantiating Client with the proper values. If you provide a wrong token the process will exit showing you the relevant error message.\n\n```ts\nclient.on(\"Ready\", () => {\n  console.log(`Logged in as ${client.user.username} at ${new Date()}`);\n});\n```\n> We're listening to the `Ready` event, this event will be emitted when we successfully connect with discord's api. `client.user` will contain data about the client and will be populate after client is ready.\n\n```ts\nclient.on(\"MessageCreate\", async (message) => {\n  if (message.content.toLowerCase() === \"!ping\") {\n    await message.reply({ content: `Pong!\\n${client.ping}ms` });\n  }\n});\n```\n\n> Here we're listening to the `MessageCreate` event, this event will be emitted when a message in sent in any channel which bot can see. This event will not be emitted when message is sent by the client/bot (thats the expected behaviour lol.). The `MessageContent` intent will return a `content` string which can be excessed by `message.content`. Here we're checking if message's content is `!ping` if it is reply with a message.\n\n\nOutput:\n\n![image](/docs/pong.png)","code":"var Component=(()=>{var o=Object.create;var c=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(n,l)=>()=>(l||n((l={exports:{}}).exports,l),l.exports),N=(n,l)=>{for(var a in l)c(n,a,{get:l[a],enumerable:!0})},i=(n,l,a,s)=>{if(l&&typeof l==\"object\"||typeof l==\"function\")for(let t of m(l))!g.call(n,t)&&t!==a&&c(n,t,{get:()=>l[t],enumerable:!(s=d(l,t))||s.enumerable});return n};var u=(n,l,a)=>(a=n!=null?o(p(n)):{},i(l||!n||!n.__esModule?c(a,\"default\",{value:n,enumerable:!0}):a,n)),w=n=>i(c({},\"__esModule\",{value:!0}),n);var h=j((v,r)=>{r.exports=_jsx_runtime});var _={};N(_,{default:()=>f,frontmatter:()=>y});var e=u(h()),y={title:\"Getting Started\",order:3,description:\"Creating Your First Bot Using DenoCord.\"};function b(n={}){let{wrapper:l}=n.components||{};return l?(0,e.jsx)(l,Object.assign({},n,{children:(0,e.jsx)(a,{})})):a();function a(){let s=Object.assign({p:\"p\",pre:\"pre\",code:\"code\",span:\"span\",blockquote:\"blockquote\",ul:\"ul\",li:\"li\",a:\"a\",img:\"img\"},n.components),{H3:t}=s;return t||k(\"H3\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(s.p,{children:\"Lets Create a Basic Bot using DenoCord\"}),`\n`,(0,e.jsx)(s.pre,{className:\"language-ts\",children:(0,e.jsxs)(s.code,{className:\"hljs language-ts code-highlight\",children:[(0,e.jsx)(s.span,{className:\"hljs-keyword\",children:\"import\"}),\" { \",(0,e.jsx)(s.span,{className:\"hljs-title class_\",children:\"Client\"}),\" } \",(0,e.jsx)(s.span,{className:\"hljs-keyword\",children:\"from\"}),\" \",(0,e.jsx)(s.span,{className:\"hljs-string\",children:'\"https://deno.land/x/denocordts/mod.ts\"'}),`;\n\n`,(0,e.jsx)(s.span,{className:\"hljs-keyword\",children:\"const\"}),\" client = \",(0,e.jsx)(s.span,{className:\"hljs-keyword\",children:\"new\"}),\" \",(0,e.jsx)(s.span,{className:\"hljs-title class_\",children:\"Client\"}),`({\n  `,(0,e.jsx)(s.span,{className:\"hljs-attr\",children:\"token\"}),\": \",(0,e.jsx)(s.span,{className:\"hljs-string\",children:'\"TOKEN\"'}),\", \",(0,e.jsx)(s.span,{className:\"hljs-comment\",children:\"// enter your bot's token here\"}),`\n  `,(0,e.jsx)(s.span,{className:\"hljs-attr\",children:\"clientId\"}),\": \",(0,e.jsx)(s.span,{className:\"hljs-string\",children:'\"ID\"'}),\", \",(0,e.jsx)(s.span,{className:\"hljs-comment\",children:\"// enter your bot's id here\"}),`\n  `,(0,e.jsx)(s.span,{className:\"hljs-attr\",children:\"intents\"}),\": [\",(0,e.jsx)(s.span,{className:\"hljs-string\",children:'\"Guilds\"'}),\", \",(0,e.jsx)(s.span,{className:\"hljs-string\",children:'\"GuildMessages\"'}),\", \",(0,e.jsx)(s.span,{className:\"hljs-string\",children:'\"GuildMembers\"'}),\", \",(0,e.jsx)(s.span,{className:\"hljs-string\",children:'\"MessageContent\"'}),\"], \",(0,e.jsx)(s.span,{className:\"hljs-comment\",children:\"// message content intent is required for the bot to get the content of the message\"}),`\n});\n\nclient.`,(0,e.jsx)(s.span,{className:\"hljs-title function_\",children:\"on\"}),\"(\",(0,e.jsx)(s.span,{className:\"hljs-string\",children:'\"Ready\"'}),\", \",(0,e.jsx)(s.span,{className:\"hljs-function\",children:\"() =>\"}),` {\n  `,(0,e.jsx)(s.span,{className:\"hljs-variable language_\",children:\"console\"}),\".\",(0,e.jsx)(s.span,{className:\"hljs-title function_\",children:\"log\"}),\"(\",(0,e.jsxs)(s.span,{className:\"hljs-string\",children:[\"`Logged in as \",(0,e.jsx)(s.span,{className:\"hljs-subst\",children:\"${client.user.username}\"}),\" at \",(0,e.jsxs)(s.span,{className:\"hljs-subst\",children:[\"${\",(0,e.jsx)(s.span,{className:\"hljs-keyword\",children:\"new\"}),\" \",(0,e.jsx)(s.span,{className:\"hljs-built_in\",children:\"Date\"}),\"()}\"]}),\"`\"]}),`);\n});\n\nclient.`,(0,e.jsx)(s.span,{className:\"hljs-title function_\",children:\"on\"}),\"(\",(0,e.jsx)(s.span,{className:\"hljs-string\",children:'\"MessageCreate\"'}),\", \",(0,e.jsx)(s.span,{className:\"hljs-keyword\",children:\"async\"}),` (message) => {\n  `,(0,e.jsx)(s.span,{className:\"hljs-keyword\",children:\"if\"}),\" (message.\",(0,e.jsx)(s.span,{className:\"hljs-property\",children:\"content\"}),\".\",(0,e.jsx)(s.span,{className:\"hljs-title function_\",children:\"toLowerCase\"}),\"() === \",(0,e.jsx)(s.span,{className:\"hljs-string\",children:'\"!ping\"'}),`) {\n    `,(0,e.jsx)(s.span,{className:\"hljs-keyword\",children:\"await\"}),\" message.\",(0,e.jsx)(s.span,{className:\"hljs-title function_\",children:\"reply\"}),\"({ \",(0,e.jsx)(s.span,{className:\"hljs-attr\",children:\"content\"}),\": \",(0,e.jsxs)(s.span,{className:\"hljs-string\",children:[\"`Pong!\\\\n\",(0,e.jsx)(s.span,{className:\"hljs-subst\",children:\"${client.ping}\"}),\"ms`\"]}),` });\n  }\n});\n`]})}),`\n`,(0,e.jsx)(t,{children:\"Understanding the Code\"}),`\n`,(0,e.jsx)(s.pre,{className:\"language-ts\",children:(0,e.jsxs)(s.code,{className:\"hljs language-ts code-highlight\",children:[(0,e.jsx)(s.span,{className:\"hljs-keyword\",children:\"import\"}),\" { \",(0,e.jsx)(s.span,{className:\"hljs-title class_\",children:\"Client\"}),\" } \",(0,e.jsx)(s.span,{className:\"hljs-keyword\",children:\"from\"}),\" \",(0,e.jsx)(s.span,{className:\"hljs-string\",children:'\"https://deno.land/x/denocordts/mod.ts\"'}),`;\n`]})}),`\n`,(0,e.jsxs)(s.blockquote,{children:[`\n`,(0,e.jsx)(s.p,{children:\"We're Importing the Client class from the DenoCord library. Client is the main class that handles all the events. It takes 3 arguments\"}),`\n`,(0,e.jsxs)(s.ul,{children:[`\n`,(0,e.jsxs)(s.li,{children:[\"token \\u2192 The Token of the bot which is required to interact with the discord's api. You can get one from \",(0,e.jsx)(s.a,{href:\"discord.com/developers/applications\",children:\"here\"})]}),`\n`,(0,e.jsx)(s.li,{children:\"clientId \\u2192 The id of the bot.\"}),`\n`,(0,e.jsxs)(s.li,{children:[\"intents \\u2192 The intents, it takes in a list of intents. You'll only recieve events whose intents are passed to the client. For Example: \",(0,e.jsx)(s.code,{children:\"MessageContent\"}),\" intent will provide you with the \",(0,e.jsx)(s.code,{children:\"content\"}),\" property on \",(0,e.jsx)(s.code,{children:\"Message\"}),\" class.\"]}),`\n`]}),`\n`]}),`\n`,(0,e.jsx)(s.pre,{className:\"language-ts\",children:(0,e.jsxs)(s.code,{className:\"hljs language-ts code-highlight\",children:[(0,e.jsx)(s.span,{className:\"hljs-keyword\",children:\"const\"}),\" client = \",(0,e.jsx)(s.span,{className:\"hljs-keyword\",children:\"new\"}),\" \",(0,e.jsx)(s.span,{className:\"hljs-title class_\",children:\"Client\"}),`({\n  `,(0,e.jsx)(s.span,{className:\"hljs-attr\",children:\"token\"}),\": \",(0,e.jsx)(s.span,{className:\"hljs-string\",children:'\"TOKEN\"'}),\", \",(0,e.jsx)(s.span,{className:\"hljs-comment\",children:\"// enter your bot's token here\"}),`\n  `,(0,e.jsx)(s.span,{className:\"hljs-attr\",children:\"clientId\"}),\": \",(0,e.jsx)(s.span,{className:\"hljs-string\",children:'\"ID\"'}),\", \",(0,e.jsx)(s.span,{className:\"hljs-comment\",children:\"// enter your bot's id here\"}),`\n  `,(0,e.jsx)(s.span,{className:\"hljs-attr\",children:\"intents\"}),\": [\",(0,e.jsx)(s.span,{className:\"hljs-string\",children:'\"Guilds\"'}),\", \",(0,e.jsx)(s.span,{className:\"hljs-string\",children:'\"GuildMessages\"'}),\", \",(0,e.jsx)(s.span,{className:\"hljs-string\",children:'\"GuildMembers\"'}),\", \",(0,e.jsx)(s.span,{className:\"hljs-string\",children:'\"MessageContent\"'}),\"], \",(0,e.jsx)(s.span,{className:\"hljs-comment\",children:\"// message content intent is required for the bot to get the content of the message\"}),`\n});\n`]})}),`\n`,(0,e.jsxs)(s.blockquote,{children:[`\n`,(0,e.jsx)(s.p,{children:\"We're instantiating Client with the proper values. If you provide a wrong token the process will exit showing you the relevant error message.\"}),`\n`]}),`\n`,(0,e.jsx)(s.pre,{className:\"language-ts\",children:(0,e.jsxs)(s.code,{className:\"hljs language-ts code-highlight\",children:[\"client.\",(0,e.jsx)(s.span,{className:\"hljs-title function_\",children:\"on\"}),\"(\",(0,e.jsx)(s.span,{className:\"hljs-string\",children:'\"Ready\"'}),\", \",(0,e.jsx)(s.span,{className:\"hljs-function\",children:\"() =>\"}),` {\n  `,(0,e.jsx)(s.span,{className:\"hljs-variable language_\",children:\"console\"}),\".\",(0,e.jsx)(s.span,{className:\"hljs-title function_\",children:\"log\"}),\"(\",(0,e.jsxs)(s.span,{className:\"hljs-string\",children:[\"`Logged in as \",(0,e.jsx)(s.span,{className:\"hljs-subst\",children:\"${client.user.username}\"}),\" at \",(0,e.jsxs)(s.span,{className:\"hljs-subst\",children:[\"${\",(0,e.jsx)(s.span,{className:\"hljs-keyword\",children:\"new\"}),\" \",(0,e.jsx)(s.span,{className:\"hljs-built_in\",children:\"Date\"}),\"()}\"]}),\"`\"]}),`);\n});\n`]})}),`\n`,(0,e.jsxs)(s.blockquote,{children:[`\n`,(0,e.jsxs)(s.p,{children:[\"We're listening to the \",(0,e.jsx)(s.code,{children:\"Ready\"}),\" event, this event will be emitted when we successfully connect with discord's api. \",(0,e.jsx)(s.code,{children:\"client.user\"}),\" will contain data about the client and will be populate after client is ready.\"]}),`\n`]}),`\n`,(0,e.jsx)(s.pre,{className:\"language-ts\",children:(0,e.jsxs)(s.code,{className:\"hljs language-ts code-highlight\",children:[\"client.\",(0,e.jsx)(s.span,{className:\"hljs-title function_\",children:\"on\"}),\"(\",(0,e.jsx)(s.span,{className:\"hljs-string\",children:'\"MessageCreate\"'}),\", \",(0,e.jsx)(s.span,{className:\"hljs-keyword\",children:\"async\"}),` (message) => {\n  `,(0,e.jsx)(s.span,{className:\"hljs-keyword\",children:\"if\"}),\" (message.\",(0,e.jsx)(s.span,{className:\"hljs-property\",children:\"content\"}),\".\",(0,e.jsx)(s.span,{className:\"hljs-title function_\",children:\"toLowerCase\"}),\"() === \",(0,e.jsx)(s.span,{className:\"hljs-string\",children:'\"!ping\"'}),`) {\n    `,(0,e.jsx)(s.span,{className:\"hljs-keyword\",children:\"await\"}),\" message.\",(0,e.jsx)(s.span,{className:\"hljs-title function_\",children:\"reply\"}),\"({ \",(0,e.jsx)(s.span,{className:\"hljs-attr\",children:\"content\"}),\": \",(0,e.jsxs)(s.span,{className:\"hljs-string\",children:[\"`Pong!\\\\n\",(0,e.jsx)(s.span,{className:\"hljs-subst\",children:\"${client.ping}\"}),\"ms`\"]}),` });\n  }\n});\n`]})}),`\n`,(0,e.jsxs)(s.blockquote,{children:[`\n`,(0,e.jsxs)(s.p,{children:[\"Here we're listening to the \",(0,e.jsx)(s.code,{children:\"MessageCreate\"}),\" event, this event will be emitted when a message in sent in any channel which bot can see. This event will not be emitted when message is sent by the client/bot (thats the expected behaviour lol.). The \",(0,e.jsx)(s.code,{children:\"MessageContent\"}),\" intent will return a \",(0,e.jsx)(s.code,{children:\"content\"}),\" string which can be excessed by \",(0,e.jsx)(s.code,{children:\"message.content\"}),\". Here we're checking if message's content is \",(0,e.jsx)(s.code,{children:\"!ping\"}),\" if it is reply with a message.\"]}),`\n`]}),`\n`,(0,e.jsx)(s.p,{children:\"Output:\"}),`\n`,(0,e.jsx)(s.p,{children:(0,e.jsx)(s.img,{src:\"/docs/pong.png\",alt:\"image\"})})]})}}var f=b;function k(n,l){throw new Error(\"Expected \"+(l?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return w(_);})();\n;return Component;"},"_id":"getting-started.mdx","_raw":{"sourceFilePath":"getting-started.mdx","sourceFileName":"getting-started.mdx","sourceFileDir":".","contentType":"mdx","flattenedPath":"getting-started"},"type":"Docs","url":"/docs/getting-started","createdAt":1655106461053}},"__N_SSG":true}